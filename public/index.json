[
{
	"uri": "/",
	"title": "AWS合作伙伴动手训练营--GCR Graviton migration Game DAY ",
	"tags": [],
	"description": "",
	"content": "嗨，您好！欢迎来到中国区AWS APN 游戏沉浸日\n为期一天的 Graviton migration GameDay 是一次轻松有趣的亚马逊云科技针对Graviton示例的架构探索之旅，合作伙伴可以多人组队参与（每队三至五人）。每个队伍将通过实操动手，快速掌握如何通过亚马逊云科技Graviton提升业务负载环境性价比，以真实生产环境进行演练动手完成X86架构到Graviton架构的迁移，完成应用、数据、接入各个架构层的Graviton性能测试。参加游戏的任意分组在每项实验游戏中计分，最终分数最高者获胜。\n 反馈您遇到的问题   联系本页面作者   了解更多的AWS动手训练营  "
},
{
	"uri": "/0_0-introduction.html",
	"title": "活动介绍",
	"tags": [],
	"description": "",
	"content": "GCR Graviton Game DAY 嗨，您好！欢迎来到中国区AWS APN动手训练营 GCR Graviton Game Day\n要完成标准训练营内容，大约需要8小时。请各位学员合理安排好时间，手机调至静音。\n 目标受众 训练营目标受众是AWS用户解决方案架构师、运维工程师，合作伙伴架构师、售前工程师。\n Game DAY 目标 通过本次培训\n1，学员能熟练掌握Graviton实例的开通，配置，报价以及价格对比\n2，学员能了解常见应用的迁移，如Apache，Java，Redis，Mysql等场景\n3，学员能为客户宣讲ARM架构迁移的方案PPT,具备Graviton售前能力\n4，学员能够具备Graviton性能测试能力\n背景描述 小汪公司是国内高速发展的互联网企业。在过去3年的高速发展中，小汪公司IT资源已于初期的数台服务器单体架构演变成当前由划分业务的多中心多平台超500台实例的大型公有云集群，所有应用基于x86架构。近日，小汪公司经历了一次性能事故和内部成本核算会议，他们发现一些行业内先进的竞争对手在IT资源财报支出上要比他们低得多，并且在大促活动抗压能力和单日数据处理能力上体现出更高的性能。小汪公司即刻决定，对市场发起公开招标，要求供应商以咨询加交付的方式为小汪公司节省20%以上的成本，并提升10%以上的性能。\nYYY公司(由各位参加游戏的专家分成小组代表不同应标公司)需要在活动中完成5个动作：   1，理解甲方提供的现状材料，以Graviton为核心为客户设计降本增效的方案，并向甲方讲标。\n讲标模版PPT可以参考此链接（TODO），各小组可以自行调整讲标PPT内容\n  2，通过CloudFormation launch甲方当前的IT环境，包括，1台javaEC2、mysql、redis、nginx，\n  3，按照讲标设计的方案对甲方现有环境进行迁移，验证业务可行性，整体方案。\n  4，按照甲方提供的测试脚本进行迁移后的性能测试，出具测试报告，测试报告参考链接（Todo），各小组可以自行调整。\n  5，为甲方核算综合性价比，提供降本增效优化建议\n  小汪公司将查看并点评每家供应商的交付物，公开每家供应商的成本节省率和性能优化率，评选中标供应商\n实验架构特点 模拟一个生产级别的示范应用三层架构，包含：\n Apache前端 基于Java的一个jar包应用程序， redis mysql  这是由甲方提供的环境架构图，我们计划从此三层的X86环境迁移到ARM的三层架构，过程中您将使用不同的迁移手段和迁移工具 您将通过CloudFormation去创建原始环境，若您有兴趣，您可以下载保存CloudFormation源代码\n现有环节的成本总结评估 todo  计算EC2-X86每月按需成本 ____$ 计算EC2-X86每年按需成本 ____$ 计算EC2-ARM每月按需成本 ____$ 计算EC2-ARM每年按需成本 ____$ 计算ARM架构的EC2每年节约成本百分比。 （EC2-X86年成本-EC2-ARM年成本）/EC2-ARM年成本= ____%  现有环节的性能测试表 todo 可以预先下载测试报告模版（Todo），下载链接\nAWS Graviton 处理器 在 Amazon EC2 中实现更高性价比 AWS 设计的 AWS Graviton 处理器为 Amazon EC2 中运行的云工作负载提供最佳性价比。\n与第一代 AWS Graviton 处理器相比，AWS Graviton2 处理器不管在性能还是功能上都实现了巨大的飞跃。基于 Graviton2 的实例为 Amazon EC2 中的工作负载提供最佳性价比。基于 Graviton2 的实例支持广泛的通用型、突发型、计算优化型、内存优化型、存储优化型和加速计算型工作负载，包括应用程序服务器、微服务、高性能计算 (HPC)、基于 CPU 的机器学习 (ML) 推理、视频编码、电子设计自动化、游戏、开源数据库和内存中的缓存。许多 AWS 服务（包括 Amazon Aurora、Amazon ElastiCache、Amazon EMR、AWS Lambda 和 AWS Fargate）也支持基于 Graviton2 的实例，以获得具有显著性价比优势的完全托管式体验。包括 Epic Games、DIRECTV、Intuit、Lyft 和 Formula 1 在内数以千计的客户在基于 Graviton2 的实例上运行生产工作负载，既显著提升了性能，又节省了成本。\nAWS Graviton3 处理器是 AWS Graviton 处理器系列中的最新产品。与 AWS Graviton2 处理器相比，它们的计算性能提高多达 25%，浮点性能提高多达 2 倍，以及加密工作负载性能最多加快 2 倍。针对机器学习 (ML) 工作负载，AWS Graviton3 处理器所提供的性能比 AWS Graviton2 处理器高出多达 3 倍，并支持 bfloat16。它们还支持 DDR5 内存，相比 DDR4 内存带宽增加了 50%。\n预期费用 您需要在您的AWS账户中运行此动手训练营时所使用的AWS服务的成本支付费用。截至发布之日，按计划中的实验基准成本应为：\n S3 ：\u0026lt; 0.1 $ EC2：\u0026lt; 20 $ VPC \u0026lt; 1 $  支持区域  ap-northeast-1: ap-northeast-2: ap-southeast-1: ap-southeast-2: eu-central-1: sa-east-1: us-east-1: us-east-2: us-west-1: us-west-2:  成本管理标签：我们建议您无论何时创建云资源，都对其进行标记。请您尝试在实验期间为实验资源设置统一的标记字段，例如项目：awschinaworkshop\n  反馈您遇到的问题   联系本页面作者   了解更多的AWS动手训练营  "
},
{
	"uri": "/0_1-agenda.html",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": "简介： 为期一天的 Graviton GameDay 是一次轻松有趣的亚马逊云科技针对Graviton示例的架构探索之旅，合作伙伴可以多人组队参与（每队三—五人）。每个队伍将通过实操动手，快速掌握如何通过亚马逊云科技Graviton提升业务负载环境性价比，以真实生产环境进行演练动手完成X86架构到Graviton架构的迁移，完成应用、数据、接入各个架构层的Graviton性能测试。参加游戏的任意分组在每项实验游戏中计分，最终分数最高者获胜。\n   开始时间 持续 培训类型 课题 导师     09:10am 20 mins N/A 签到    09:30am 10 mins Presentation 培训介绍 神秘嘉宾   09:40am 20 mins Game 游戏分组，招标书介绍 PSA:吴迦德   10:00am 20 mins Presentation Graviton2 基本优势 PBD:汪萍   10:20am 30 mins Game 各小组编写投标材料 PSA:詹国军，吴迦德   10:50am 10 mins N/A 茶歇    11:00am 30 mins Presentation Graviton2 deep dive SSA:Vincent Wang   11:30am 10 mins Game 小组优化投标材料 PSA:詹国军   11:40am 20 mins Game 小组唱标，甲方打分 导师团队   12:00am 10 mins Lab 发放Event Engine实验账号/启动环境 PSA:吴迦德   12:10am 70 mins N/A 午餐    01:20pm 15 mins Lab 实验1：部署甲方原有环境 PSA:吴迦德   01:35pm 20 mins Presentation Graviton2 迁移 PSA:詹国军   01:55pm 90 mins Lab 实验2：迁移甲方3层架构 导师技术团队   03:25pm 20 mins Presentation Graviton2 性能优势 PSA:张振威   03:45pm 90 mins Lab 实验3：迁移后环境的性能测试 导师技术团队   05:15pm 45 mins Game 龙虎榜点评 学员小组 + 导师技术团队   06:00pm 5 mins Presentation take away 资料介绍 PSA:吴迦德   06:05pm 15 mins Game kahoot PSA:吴迦德   06:20pm 10 mins Presentation 课程总结 PBD:汪萍   06:30pm N/A 活动结束      "
},
{
	"uri": "/1-%E5%AE%9E%E9%AA%8C1-%E9%83%A8%E7%BD%B2%E7%8E%B0%E6%9C%89%E7%8E%AF%E5%A2%83.html",
	"title": "实验1 -- 部署现有环境",
	"tags": [],
	"description": "",
	"content": " 原始架构介绍 CloudFormation部署 原系统验证测试  "
},
{
	"uri": "/1-%E5%AE%9E%E9%AA%8C1-%E9%83%A8%E7%BD%B2%E7%8E%B0%E6%9C%89%E7%8E%AF%E5%A2%83/0_1_1-%E5%8E%9F%E5%A7%8B%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D.html",
	"title": "原始系统架构介绍",
	"tags": [],
	"description": "",
	"content": "使用 CloudFormation 部署 Graviton Game Day 架构\n  本实验中，我们将通过CloudFormation部署Graviton-GameDay原架构，部署完成后您将得到一个X86环境下典型的3层架构。您将基于此环境进行后续的GameDay实验，并赢得知识成就和比赛得分。\n  CloudFormation将为您快速部署下图的GameDay原始环境\n  资源清单 我们将使用CloudFormation模板配置以下资源：\n 新建VPC，包含两个公有子网、两个私有子网，Internet网关和安全组以对外提供服务并支持安全访问控制。 一台堡垒机EC2实例，创建将被放置在公有子网，是整套环境ssh的唯一入口对下游组件它将向架构前后端进行配置管理，对公网您可以配置只有您的本地IP地址可以与之通讯 一台EC2用于部署Apache Web服务器Apache HTTP Server (\u0026quot;httpd\u0026quot;) ,放置在公有子网，他在公网上提供Tomcat的Web服务(使用了apache-tomcat-9.0.41转发应用服务器请求) 一台EC2用于部署由Java 编写的 Tomcat Apache Tomcat® 应用程序,这是一个联系人管理系统的示例应用。他被放置在私有子网。 一台EC2用于部署 Redis，该 Redis 与 Tomcat 缓存集成，用于保持用户的登录状态（使用了 Redisson Session Manager for Tomcat），他被放置在私有子网。 一台EC2用于部署 MySQL，该 MySQL 与 Tomcat 数据库集成，可操作数据库的增删改查，他被放置在私有子网。 部署AWS CloudFront 以Web服务器为源Apache HTTP Server (\u0026quot;httpd\u0026quot;) ,他提供动态加速，并提供了证书、迁移割接的便利性。 新建安全组，包括 堡垒机/Web/App/DB 4个安全组，用户整套环境的最小访问权限控制。 Amazon S3存储桶，用于保存整套环境的源码和配置文件。 IAM角色，堡垒机/Apache/Tomcat/Redis/MySQL.5个role用于管理整套环境服务权限 您通过多达20种参数的自定义在集群创建之初即完成优化配置，这些参数都有默认值，是我们游戏日推荐的迁移和测试配置。（您可以在CloudFormation参数页面自定义配置参数） 为方便内部测试，模板将为您的每台实例自动加载AmazonSSMManagedInstanceCore权限以满足PVRE合规要求，请放心食用  "
},
{
	"uri": "/1-%E5%AE%9E%E9%AA%8C1-%E9%83%A8%E7%BD%B2%E7%8E%B0%E6%9C%89%E7%8E%AF%E5%A2%83/0_1_2-cloudformation%E9%83%A8%E7%BD%B2.html",
	"title": "CloudFormation部署",
	"tags": [],
	"description": "",
	"content": "实验选项\n如果您是一个人使用自己的AWS账户或是使用PSA导师发送的AWS Event Engine账号进行实验，建议您使用cloudformation启动环境。而如果您是多人使用同一账户的不同IAM User进行实验，建议您手动搭建环境进行实验，并在必要时明确区别您和他人的资源命名，例如在任何资源名后加入-user1。\n cloudformation搭建环境  登录实验环境账号\u0026mdash;登录AWS EventEngine说明 如果您登录AWS Wokshop门户继续进行实验，则需要团队哈希值。单击此处，输入从活动组织者处收到的12位参与者哈希代码。这将更改右下角的按钮以接受条款和登录。单击该按钮继续下一步 单击电子邮件一次性密码（OTP）按钮。 写下您自己的电子邮件帐户，然后单击“发送代码”按钮。 在电子邮件收件箱中，检查您的一次性密码电子邮件主题，并复制密码。粘贴复制的密码，如下所示，然后按“登录”按钮。 在下一个屏幕上，按AWS控制台按钮接收登录链接以登录控制台。 单击打开AWS控制台按钮时，访问AWS管理控制台页面。此外，还可以找到环境的CLI访问和密钥访问密钥。 完成以上所有步骤后，即可开始实验室\n使用cloudformation搭建环境 1.使用有效凭证登录AWS控制台\n2.选择AWS区域。 此实验室的首选区域是us-west-1。\n 您可以点击以下的 Launch Stack ，这样将直接跳转到首选区域的堆栈创建页面     账户所属 实验模板     海外区域账户     4.在cloudformation Parameters创建页面，您可以对不同参数进行选择配置，如下图必选的参数为KeyPairName/AvailabilityZones。 其他参数您可以自定义或按照默认值进行。\n5.在cloudformation 预览页面，请勾选点击确认cloudformation有权创建IAM 角色。\n等待cloudformation供应所有资源。 大约需要35分钟才能完成执行\n6.cloudformation部署成功，包含4个内嵌stack，主stack为Graviton-GameDay\n7.点击Graviton-GameDay进入output，即可查看您可访问的多个URL，其中您的公网入口为CloudFrontDNS的URL，他将允许您在参数中定义的AccessCIDR访问。\n"
},
{
	"uri": "/1-%E5%AE%9E%E9%AA%8C1-%E9%83%A8%E7%BD%B2%E7%8E%B0%E6%9C%89%E7%8E%AF%E5%A2%83/0_1_3-%E5%8E%9F%E7%B3%BB%E7%BB%9F%E9%AA%8C%E8%AF%81%E6%B5%8B%E8%AF%95.html",
	"title": "原系统验证测试",
	"tags": [],
	"description": "",
	"content": "登录Cloudfront查看Game Day 的原应用系统\n1,在您的任意浏览器输出访问output的URL，这是一个Cloudfront地址，后面连接至Apache Web服务器，您可以通过该域名访问原有系统，例如https://dirjlcj2zs8i9.cloudfront.net/sample-webapp/\n2,输入您的在cloudformation启动时自定义的密码，如果您没有进行模板的改动，默认用户名密码为admin/admin，点击登录后获得以下界面 使用原系统的应用功能\n3,完成登录后您可以看到示例的联系人管理界面。\n4,请使用Add New Contact创建任意联系人，操作将被写入直MySQL数据库中\n5,您可以完成任意联系人的增删改查操作，这些前端操作会映射为Tomcat对数据库的增删改查\n6,您可以在浏览器中打开新的窗口页面，重新进入联系人系统，如您cloudformation输出的cloudfront地址，例如https://dirjlcj2zs8i9.cloudfront.net/sample-webapp/ 您会观察到您无需再次登录，因为后台的Redis保持了你的登录状态。\n登录原系统服务器后台查看相关组件 回到您的EventEngine界面，按在此下载您的SSH秘钥(如果您已下载请找到并导航至您下载好的秘钥文件路径)。 登录堡垒机实例 方法1，使用putty等linux工具连接到EC2\n您可以为您的Windows电脑下载putty ,随后打开putty，指定pem文件，配置服务器用户名，公网DNS地址\n  Host Name (主机名) 框中，输入 主机DNS或者公网IP地址\n  Amazon Linux AMI，用户名称是 ec2-user\n  端口： 22\n  在 Category (类别) 窗格中，展开 Connection (连接)，再展开 SSH，然后选择 Auth (身份验证)。完成以下操作：\n  单击 Browse (浏览)。选择您的 .ppk 或 .pem 文件，然后单击 Open (打开)。既是您的EventEngine界面下载的秘钥文件\n  如果这是您第一次连接到此实例，PuTTY 会显示安全警告对话框，询问您是否信任您要连接到的主机。请单击Yes\n   方法2，使用AWS 的 SSM 工具链接\n点击， 确认你的EC2是否具有对应的ssm 角色\n在左侧的控制台导航菜单选择EC2 Dashboard（EC2控制面板） 首先在控制台中上方搜索栏搜索 EC2，并从结果列表中选中此服务。然后选中对应的EC2，点击操作按钮，安全，编辑IAM角色。 如果已经有对应的SSM角色，则说明有SSM连接的权限。 点击连接按钮， 选择会话管理器session manager，点击连接，进入这台EC2的操作系统命令行界面 通过堡垒机实例连接至后端服务器 使用SCP 命令 将您的秘钥传输到堡垒机，导航至您的秘钥文件路径，键入如下命令\nscp -i ee-default-keypair.pem ./ee-default-keypair.pem ec2-user@\u0026lt;$your-Bastion-dns\u0026gt;:/home/ec2-user/ 其中 ee-default-keypair.pem替换为您秘钥的文件名，your-Bastion-dns替换为您的堡垒机公网DNS地址。\n 示例中的jiade.pem是秘钥文件  登录至堡垒机，验证您SCP传输进来的秘钥文件。您只有通过堡垒机才可以链接到后端的服务器\n在堡垒机上为秘钥授权，以便您能登录至后端服务器，请在堡垒机Home/ec2-user/路径下，键入如下命令\nchmod 600 ee-default-keypair.pem 其中 ee-default-keypair.pem替换为您秘钥的文件名\n验证mysql服务\n现在您可以在堡垒机上登录到后端任意机器，例如登录到mysql服务器，您记录下mysql的Private IP DNS name如下图所示\n在堡垒机上使用ssh命令登录后端机器，输入\nchmod 600 ee-default-keypair.pem@ec2-user@\u0026lt;your-mysql-Private-name\u0026gt; 其中 ee-default-keypair.pem替换为您秘钥的文件名，\u0026lt;your-mysql-Private-name\u0026gt;替换为您在控制塔查看的mysql的Private IP DNS name,输入yes以便确定连接\n在Mysql上使用mysql连接至数据库，输入\nmysql -u graviton -p 其中 graviton是模板中默认的数据库用户名，如果您自定义了该参数请调整为您自定义的值\n随后mysql会要求我们输入密码，请复制GravitonGameDay@2022进行输入，这是模板中默认的数据库密码，如果您自定义了该参数请调整为您自定义的值\nGravitonGameDay@2022 在mysql数据库中您可以查看我们当前的数据库，查看数据库中的表，您可以使用以下命令,如\nshow databases; /use webappdb;/ show tables; /select * from users;\nmysql\u0026gt; show databases; +--------------------+ | Database | +--------------------+ | information_schema | | mysql | | performance_schema | | sys | | webappdb | +--------------------+ 5 rows in set (0.00 sec) mysql\u0026gt; use webappdb; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed mysql\u0026gt; show tables; +--------------------+ | Tables_in_webappdb | +--------------------+ | user_account_roles | | user_accounts | | users | +--------------------+ 3 rows in set (0.00 sec) mysql\u0026gt; select * from users; Empty set (0.00 sec) mysql\u0026gt; select * from users; +----+----------+------------------+---------------+ | id | name | email | company | +----+----------+------------------+---------------+ | 5 | demo | demo@aws.com | 18618191816 | | 6 | Wu-JiaDe | wjiad@amazon.com | 198 | | 7 | gameday | asd@xxx.com | 9982-9983-221 | +----+----------+------------------+---------------+ 3 rows in set (0.00 sec) 在数据库中，您可以通过exit命令回到数据库服务器中，在数据库服务器中，您可以再次通过exit命令回到您的堡垒机。通过ls查看您的key文件以确定您现在是在堡垒机上\nmysql\u0026gt; exit Bye [ec2-user@ip-10-0-2-12 ~]$ exit 登出 Connection to ip-10-0-2-12.ec2.internal closed. [ec2-user@ip-10-0-0-210 ~]$ ls code code.tar.gz config get-stack-ip-addresses.py jiade.pem outputurl stack-info.json [ec2-user@ip-10-0-0-210 ~]$ 验证 redis 服务\n现在我们尝试登录到redis服务器，您记录下redis的Private IP DNS name如下图所示\n在堡垒机上使用ssh命令登录后端机器，输入\nchmod 600 ee-default-keypair.pem@ec2-user@\u0026lt;your-redis-Private-name\u0026gt; 其中 ee-default-keypair.pem替换为您秘钥的文件名，\u0026lt;your-redis-Private-name\u0026gt;替换为您在控制塔查看的redis的Private IP DNS name,输入yes以便确定连接\n在redis机器上您可以通过redis-cli命令打开redis客户端，里面保持着您的用户登录状态,请使用如下命令登录redis客户端\n./redis-6.0.9/src/redis-cli -h ip-10-0-3-134.ec2.internal 其中ip-10-0-3-134.ec2.internal请替换为您自己的redis服务器Private IP DNS name，随后您可以使用命令查看redis中的数据，例如keys * / HGETALL \u0026quot;redisson:tomcat_session:xxxxxxxxx\u0026quot;\n[ec2-user@ip-10-0-3-134 ~]$ [ec2-user@ip-10-0-3-134 ~]$ ./redis-6.0.9/src/redis-cli -h ip-10-0-3-134.ec2.internal ip-10-0-3-134.ec2.internal:6379\u0026gt; keys * 1) \u0026#34;redisson:tomcat_session:31C777EB4C99DFB418980B8D25AA9037\u0026#34; ip-10-0-3-134.ec2.internal:6379\u0026gt; ip-10-0-3-134.ec2.internal:6379\u0026gt; HGETALL \u0026#34;redisson:tomcat_session:31C777EB4C99DFB418980B8D25AA9037\u0026#34; 1) \u0026#34;session:principal\u0026#34; 2) \u0026#34;\\x04\\x04\\t\u0026gt;@org.apache.catalina.realm.GenericPrincipal$SerializablePrincipal\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x04\u0026gt;\\x04name\\x16\\x00\u0026gt;\\bpassword\\x16\\x00\u0026gt;\\tprincipal\\x16\\x00\u0026gt;\\x05roles\\x16\\x00\\x16\u0026gt;\\x05admin\u0026gt;\\x05admin\\x01B\\x01\\x14\u0026gt;\\bstandard\u0026#34; 3) \u0026#34;session:maxInactiveInterval\u0026#34; 4) \u0026#34;\\x04K\\x00\\x00\\a\\b\u0026#34; 5) \u0026#34;session:authtype\u0026#34; 6) \u0026#34;\\x04\u0026gt;\\x04FORM\u0026#34; 7) \u0026#34;session:creationTime\u0026#34; 8) \u0026#34;\\x04L\\x00\\x00\\x01\\x83\\x0c\\x9f\\xf3\\x80\u0026#34; 9) \u0026#34;session:isNew\u0026#34; 10) \u0026#34;\\x04Q\u0026#34; 11) \u0026#34;session:isValid\u0026#34; 12) \u0026#34;\\x04P\u0026#34; 13) \u0026#34;session:thisAccessedTime\u0026#34; 14) \u0026#34;\\x04L\\x00\\x00\\x01\\x83\\x0c\\xa1\\x12\\xdc\u0026#34; 15) \u0026#34;session:lastAccessedTime\u0026#34; 16) \u0026#34;\\x04L\\x00\\x00\\x01\\x83\\x0c\\xa1\\x12\\xdc\u0026#34; ip-10-0-3-134.ec2.internal:6379\u0026gt; 您可以通过exit命令回到redis服务器中，在redis服务器中，您可以再次通过exit命令回到您的堡垒机。通过ls查看您的key文件以确定您现在是在堡垒机上\n验证 Tomcat 的 Java 服务\n查看并记录您Tomcat服务的地址，回到控制台，查看命名为Graviton_GameDay_App1的实例\n回到堡垒机上使用ssh命令登录后端机器，输入\nchmod 600 ee-default-keypair.pem@ec2-user@\u0026lt;your-tomcat-Private-name\u0026gt; 在Tomcat机器上，您可以切换到root用户，并通过systemctl status tomcat命令查看tomcat的状态\n[ec2-user@ip-10-0-0-210 ~]$ ssh -i jiade.pem ec2-user@ip-10-0-3-138.ec2.internal Last login: Sat Sep 3 00:29:37 2022 from ip-10-0-0-210.ec2.internal __| __|_ ) _| ( / Amazon Linux 2 AMI ___|\\___|___| https://aws.amazon.com/amazon-linux-2/ [ec2-user@ip-10-0-3-138 ~]$ sudo su [root@ip-10-0-3-138 ec2-user]# sudo systemctl status tomcat ● tomcat.service - Tomcat Application Server Loaded: loaded (/etc/systemd/system/tomcat.service; enabled; vendor preset: disabled) Active: active (running) since 六 2022-09-03 00:35:48 UTC; 2 days ago Process: 22722 ExecStop=/usr/share/tomcat/bin/shutdown.sh (code=exited, status=0/SUCCESS) Process: 22774 ExecStart=/usr/share/tomcat/bin/startup.sh (code=exited, status=0/SUCCESS) Main PID: 22782 (java) CGroup: /system.slice/tomcat.service └─22782 /usr/lib/jvm/jre/bin/java -Djava.util.logging.config.file=/usr/share/tomcat/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djava.awt.headless=true -Djdk.tls.ephemeralDHKey... 9月 03 00:35:48 ip-10-0-3-138.ec2.internal systemd[1]: Starting Tomcat Application Server... 9月 03 00:35:48 ip-10-0-3-138.ec2.internal startup.sh[22774]: Tomcat started. 9月 03 00:35:48 ip-10-0-3-138.ec2.internal systemd[1]: Started Tomcat Application Server. 您还可以使用cat /usr/share/tomcat/logs/catalina.out 命令查看tomcat的日志，这儿往往是排错/查看应用操作记录的秘诀\n[root@ip-10-0-3-138 ec2-user]# cat /usr/share/tomcat/logs/catalina.out  ······ com.mysql.jdbc.JDBC42PreparedStatement@542007f1: select * from users com.mysql.jdbc.JDBC42PreparedStatement@1117a60a: select * from users com.mysql.jdbc.JDBC42PreparedStatement@47676566: select * from users 05-Sep-2022 07:49:12.702 INFO [http-nio-8080-exec-6] org.redisson.tomcat.RedissonSessionManager.findSession Session F3F716043C0CDE3B1B63D2E116EBC925 can\u0026#39;t be found 05-Sep-2022 07:49:12.703 INFO [http-nio-8080-exec-6] org.redisson.tomcat.RedissonSessionManager.findSession Session F3F716043C0CDE3B1B63D2E116EBC925 can\u0026#39;t be found 05-Sep-2022 07:49:12.703 INFO [http-nio-8080-exec-6] org.redisson.tomcat.RedissonSessionManager.findSession Session F3F716043C0CDE3B1B63D2E116EBC925 can\u0026#39;t be found 05-Sep-2022 07:49:12.704 INFO [http-nio-8080-exec-6] org.redisson.tomcat.RedissonSessionManager.findSession Session F3F716043C0CDE3B1B63D2E116EBC925 can\u0026#39;t be found com.mysql.jdbc.JDBC42PreparedStatement@2a8e2c84: select * from users INSERT INTO users (name, email, company) VALUES (?, ?, ?); com.mysql.jdbc.JDBC42PreparedStatement@2b3ce02: INSERT INTO users (name, email, company) VALUES (\u0026#39;demo\u0026#39;, \u0026#39;demo@aws.com\u0026#39;, \u0026#39;18618191816\u0026#39;); com.mysql.jdbc.JDBC42PreparedStatement@771bd510: select * from users INSERT INTO users (name, email, company) VALUES (?, ?, ?); com.mysql.jdbc.JDBC42PreparedStatement@16de25a0: INSERT INTO users (name, email, company) VALUES (\u0026#39;Wu-JiaDe\u0026#39;, \u0026#39;wjiad@amazon.com\u0026#39;, \u0026#39;198\u0026#39;); com.mysql.jdbc.JDBC42PreparedStatement@1b0c0532: select * from users INSERT INTO users (name, email, company) VALUES (?, ?, ?); com.mysql.jdbc.JDBC42PreparedStatement@6547a469: INSERT INTO users (name, email, company) VALUES (\u0026#39;gameday\u0026#39;, \u0026#39;asd@xxx.com\u0026#39;, \u0026#39;9982-9983-221\u0026#39;); com.mysql.jdbc.JDBC42PreparedStatement@10ffdbc7: select * from users 一些关于tomcat重要的配置信息被放在/usr/share/tomcat/conf/路径下\n例如/usr/share/tomcat/conf/context.xml 存放了mysql数据库的配置信息\n例如/usr/share/tomcat/conf/server.xml存放了tomcat服务端口，连接数量等配置\n例如/usr/share/tomcat/conf/redisson.yaml存放了redis数据库的配置信息\n您可以通过cat 或者 vim 等命令去查看以上配置文件已做了解，这会在后面的迁移和性能测试环节有重大价值\n而/usr/share/tomcat/lib/存放了原始应用会引用到的java插件包\n验证 Apache HTTPServer web服务\n查看并记录您Apache服务的地址，回到控制台，查看命名为Graviton_GameDay_Web1的实例\n回到堡垒机上使用ssh命令登录后端机器，输入\nchmod 600 ee-default-keypair.pem@ec2-user@\u0026lt;your-Apache-Private-name\u0026gt; [ec2-user@ip-10-0-0-210 ~]$ ssh -i jiade.pem ec2-user@ip-10-0-0-163.ec2.internal The authenticity of host 'ip-10-0-0-163.ec2.internal (10.0.0.163)' can't be established. ECDSA key fingerprint is SHA256:EA/hXytzrdE2SYxQXscxW0lFOxUl61koLiboMzFEJSg. ECDSA key fingerprint is MD5:a8:8f:78:e1:e9:98:56:c1:2c:a1:ef:fc:09:e6:7b:07. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added 'ip-10-0-0-163.ec2.internal,10.0.0.163' (ECDSA) to the list of known hosts. __| __|_ ) _| ( / Amazon Linux 2 AMI ___|\\___|___| https://aws.amazon.com/amazon-linux-2/ [ec2-user@ip-10-0-0-163 ~]$ 在Apache机器上，您可以切换到root用户，并通过systemctl status httpd.service命令查看Apache的状态\n[ec2-user@ip-10-0-0-163 ~]$ systemctl status httpd.service ● httpd.service - The Apache HTTP Server Loaded: loaded (/usr/lib/systemd/system/httpd.service; enabled; vendor preset: disabled) Active: active (running) since 六 2022-09-03 00:02:09 UTC; 2 days ago Docs: man:httpd.service(8) Process: 15632 ExecReload=/usr/sbin/httpd $OPTIONS -k graceful (code=exited, status=0/SUCCESS) Main PID: 2137 (httpd) Status: \u0026#34;Total requests: 479; Idle/Busy workers 100/0;Requests/sec: 0.00234; Bytes served/sec: 12 B/sec\u0026#34; CGroup: /system.slice/httpd.service ├─ 2137 /usr/sbin/httpd -DFOREGROUND ├─15633 /usr/sbin/httpd -DFOREGROUND ├─15635 /usr/sbin/httpd -DFOREGROUND ├─15640 /usr/sbin/httpd -DFOREGROUND ├─15642 /usr/sbin/httpd -DFOREGROUND ├─15647 /usr/sbin/httpd -DFOREGROUND ├─15932 /usr/sbin/httpd -DFOREGROUND ├─17687 /usr/sbin/httpd -DFOREGROUND ├─17893 /usr/sbin/httpd -DFOREGROUND ├─21182 /usr/sbin/httpd -DFOREGROUND └─25538 /usr/sbin/httpd -DFOREGROUND 9月 03 00:02:09 ip-10-0-0-163.ec2.internal systemd[1]: Starting The Apache HTTP Server... 9月 03 00:02:09 ip-10-0-0-163.ec2.internal systemd[1]: Started The Apache HTTP Server. 9月 04 03:25:01 ip-10-0-0-163.ec2.internal systemd[1]: Reloading The Apache HTTP Server. 9月 04 03:25:01 ip-10-0-0-163.ec2.internal systemd[1]: Reloaded The Apache HTTP Server. 关于Apache重要的配置信息被放在/etc/httpd/conf/路径下\n例如/etc/httpd/conf/httpd.conf 存放了Apache的配置信息\n您可以通过cat 或者 vim 等命令去查看以上配置文件已做了解，这会在后面的迁移和性能测试环节有重大价值\n至此。您完成了Game Day 原始环境的验证，并对整个架构完成理解\n"
},
{
	"uri": "/2-%E5%AE%9E%E9%AA%8C2-graviton-migration.html",
	"title": "实验2 -- Graviton Migration",
	"tags": [],
	"description": "",
	"content": " 数据层迁移 应用层迁移 接入层迁移  "
},
{
	"uri": "/2-%E5%AE%9E%E9%AA%8C2-graviton-migration/1-%E6%8E%A5%E5%85%A5%E5%B1%82%E8%BF%81%E7%A7%BB.html",
	"title": "数据层迁移",
	"tags": [],
	"description": "",
	"content": " 目标：通过本次数据库迁移实验，使学员掌握常见的关系型数据库mysql和非关系型数据库Redis的部署和迁移。\n 本次迁移主要包含redis和mysql两种类型数据库的实验，\n数据层迁移场景 小汪公司正在为如何降本增效，尤其是数据库层的计划评估方案，公司内部有多台Mysql数据库服务器，需要一个数据库的迁移ARM架构的评估和测试。小汪公司IT和业务部协商提供了一条测试的业务线做本次迁移评估。此业务线使用了Redis和Mysql，前端使用apache和Java架构的应用。\nMysql迁移是最常见的数据库迁移场景，有大量的第三方和云原生工具，本次实验场景采用mysqldump命令进行迁移。\nRedis迁移是缓存常见的迁移场景，本次采用redis-shake工具进行迁移。\nMysql 迁移 本次Mysql迁移采用的是mydumper,myload进行备份还原， mydumper,myload是mysql的多线程导入导出工具\n迁移流程如下： 1.通过mydumper工具把原X86数据库导出到X86本地磁盘，\n2.把备份文件上传到S3存储桶，\n3.把S3桶的数据库备份文件下载到Graviton迁移目标主机上\n4.通过myload对目标Graviton主机进行数据库还原覆盖操作\nRedis 迁移 redis迁移一般有redis-shake，主从复制PSYNC，RDB迁移、AOF迁移，Dump迁移等，本次实验使用redis-shake方式\nredis-shake介绍\nredis-shake就是一款非常好用的工具，可以支持备份、恢复、解析、同步等功能，主要的功能有：\ndecode，对RDB文件进行读取，并以json格式存储\nrestore，将RDB文件恢复到目的Redis服务器\ndump，将源Redis服务器的数据通过RDB文件的方式保存下来\nsync，支持源Redis和目的Redis的数据同步，通过模拟成Slave(使用psync)，支持全量和增量数据的同步，对单节点、主从、集群环境之间进行同步(2.8-5.0版本，codis环境)，也支持云上环境\nrump，使用scan和restore命令进行数据迁移，对不支持psync命令的环境可以使用这种方式，仅支持全量的数据迁移\n1. 数据库迁移前准备，以Redis 和 Mysql 为例的实验手册 1.1 登录实验账号，确认实验环境 请参考“登录实验环境账号—登录AWS EventEngine说明”\n1.2 检查实验环境中的数据库实例 本次Mysql的账号为：\nroot  密码为：\npassword  查询并噁登陆本次源环境的Mysql\n使用入第三方的ssh工具如putty或者AWS SSM工具连接服务器。\n检查redis服务器 登录redis服务器，-h替换服务器IP，-a后替换redis密码\nredis-cli -h host -p 6379 -a password  检查mysql服务器 登录数据库，请把-u后面替换数据库用户名，-p后面替换数据库密码 -h后面替换数据库服务器IP地址\nmysql -uroot -ppassword -h 127.0.0.1 -P 3306  切换到当前数据库上\nUse data;  查看库下表信息\nshow tables;  如图：todo\n退出数据库\nquit  1.3 准备登录实例 方法1，使用putty等linux工具连接到EC2， 打开putty，指定pem文件，服务器地址\nAmazon的EC2中，默认是不允许使用用户名和密码直接连接Instance的，而是通过AWS (Amazon Web Service)提供的证书。在第一次使用EC2的时候，AWS会要求你创建一个证书并下载，证书是一个.pem文件。\nHost Name (主机名) 框中，输入 主机DNS或者公网IP地址\nAmazon Linux AMI，用户名称是 ec2-user\n端口： 22\n在 Category (类别) 窗格中，展开 Connection (连接)，再展开 SSH，然后选择 Auth (身份验证)。完成以下操作：\n单击 Browse (浏览)。\n选择您为密钥对生成的 .ppk 或 .pem 文件，然后单击 Open (打开)。\n如果这是您第一次连接到此实例，PuTTY 会显示安全警告对话框，询问您是否信任您要连接到的主机。请单击Yes\n 方法2，使用AWS 的 SSM 工具链接 点击， 确认你的EC2是否具有对应的ssm 角色\n在左侧的控制台导航菜单选择EC2 Dashboard（EC2控制面板） 首先在控制台中上方搜索栏搜索 EC2，并从结果列表中选中此服务。然后选中对应的EC2，点击操作按钮，安全，编辑IAM角色。 如果已经有对应的SSM角色，则说明有SSM连接的权限。 点击连接按钮， 选择会话管理器session manager，点击连接，进入这台EC2的操作系统命令行界面 2 ARM架构的数据库部署 2.1 部署Mysql的Graviton实例，导航到EC2控制台 创建EC2，在左侧的控制台导航菜单选择EC2 Dashboard（EC2控制面板）\n首先在控制台中上方搜索栏搜索 EC2，并从结果列表中选中此服务。\n验证控制台右上角的Region（区域）是否与本次实验的Region值一致，然后从列表中选择 Launch instance（启动实例）下拉菜单，启动实例\n选择启动实例 注意：架构处的下拉框请选中 64位（ARM），如下图 启动实例的参数如下：\n创建EC2如下：\n名称： target Mysql 实例类型：c6g.large Amazon Machine Image（AMI）： Amazon Linux 2 AMI（HVM） 架构：64位（ARM） 密钥对名称：自己的用户名 VPC： lab 安全组：lab 存储：默认 配置用户数据： 角色：  最后点击启动实例按钮在，请在summary（汇总）核对下参数信息。 启动完毕EC2后，可以悬着 View all instance（查看所有实例），等待实例的状态显示为Running（正在运行），这表示实例已完成启动。\n2.2 部署Redis的Graviton实例，导航到EC2控制台 使用同样的方法创建一台Redis实例\n启动实例的参数如下：\n创建EC2如下：\n名称： target redis 实例类型：c6g.large Amazon Machine Image（AMI）： Amazon Linux 2 AMI（HVM） 架构：64位（ARM） 密钥对名称：自己的用户名 VPC： lab 安全组：lab 存储：默认 配置用户数据： 角色：  3数据的迁移实施 3.1 redis迁移 redis-shake是一个常用的迁移工具，它提供了备份、恢复、解析、同步等功能。\n安装redis\n $ sudo yum install redis $ systemctl start redis 安装redis-shake\n wget https://github.com/alibaba/RedisShake/releases/redis-shark-v2.0.2.tar.gz tar zxvf redis-shark-v2.0.2.tar.gz 配置redis-shake\n启动redis-shake\n3.2 mysql迁移 首先登录目标gravition的主机，使用Putty或者SSM工具\n备份hellodb数据库到当前目录下\n $ mydumper -uuser -ppassword -B data -o ./ 使用复制功能，复制mysql数据文件\n首先创建一个bucket桶\n在左侧的控制台导航菜单选择S3 Dashboard（EC2控制面板） 首先在控制台中上方搜索栏搜索 S3，并从结果列表中选中此服务。然后选中对应的S3，点击操作按钮 点击创建桶 桶名请使用自己的组名+姓名的拼音命名。 最后点击创建 把文件上传到S3\n源端的mysql已经安装AWS CLI\n然后拷贝到目标服务器的对应目录\n使用AWS CLi命令\naws configure  填写AK，SK以及默认登录的地域等信息\n AWS Access Key ID [None]: AWS Secret Access Key [None]: Default region name [None]: Default output format [None]:  登录源端服务器并复制存储桶的对象文件\n aws s3 cp ./mysql.bak s3://yourbucket/  登录目标端gravition服务器并下载S3的备份文件\n aws s3 cp s3://yourbucket/mysql.bak ./  然后还原并覆盖目标数据库\n myloader -uuser -ppassword -o -B data -o -d ./mysql.bak  数据库的测试和验证 登录数据库，请把-u后面替换数据库用户名，-p后面替换数据库密码 -h后面替换数据库服务器IP地址\nmysql -uroot -ppassword -h 127.0.0.1 -P 3306  切换到当前数据库上\nUse data;  查看库下表信息是否与源库一致\nshow tables;  如图：todo 总结 本次迁移完成了redis和mysql的数据迁移，验证。\n本次redis使用redis-shake工具进行迁移。Mysql迁移采用的是mydumper,myload进行备份还原。\n接下来开始准备应用迁移。\n"
},
{
	"uri": "/2-%E5%AE%9E%E9%AA%8C2-graviton-migration/2-%E5%BA%94%E7%94%A8%E5%B1%82%E8%BF%81%E7%A7%BB.html",
	"title": "应用层迁移",
	"tags": [],
	"description": "",
	"content": " 目标：通过本次应用迁移实验，使学员掌握了解常见Java的应用环境的迁移。\n 应用迁移说明 在云计算时代，由于功耗低、高性能以及指令集的优势，越来越多的云厂商开始选择基于ARM体系来构建云服务。小汪公司的业务系统主要采用的是基于Java环境的应用，IT部正在对于系统从X86迁移到ARM环境提出了质疑，业务系统迁移到新的ARM架构中是否能够正常运维，迁移的可行性，POC等问题困扰着IT和业务部门。\n那么常规的应用迁移步骤，如Java Python Go C++，不同语言如何迁移？ 在以当前以java应用实例，如何做适配迁移， 我们需要考虑应用的兼容性（arm平台兼容的JVM），迁移源和目标的系统环境，确认是否使用那些第三方的库，依赖包的重新编译等。 又如：C/C++程序是计算机系统级别最为成功的语言之一。业界存在大量的知名开源软件基于C/C++构建，比如Windows/Linux操作系统自身，从源代码演变成运行中的进程，需要经历编译、汇编、链接、运行等一系列过程。\n应用层迁移场景 本次迁移的实验环境为一套XX系统，\n1. 应用评估 从X86到arm环境，我们首先需要对迁移的环境做评估，应该包含以下几个纬度\n 目标端硬件信息收集 目标端的软件栈信息收集 迁移分析，对收集到的信息做分析，主要分为代码迁移和软件包迁移  Java程序是基于jvm区运行的，所以需要使用arm平台兼容的JVM。\n2. 目标端主机安装和配置 创建EC2，在左侧的控制台导航菜单选择EC2 Dashboard（EC2控制面板）\n首先在控制台中上方搜索栏搜索 EC2，并从结果列表中选中此服务。\n验证控制台右上角的Region（区域）是否与本次实验的Region值一致，然后从列表中选择 Launch instance（启动实例）下拉菜单，启动实例\n选择启动实例 注意：架构处的下拉框请选中 64位（ARM），如下图 启动实例的参数如下：\n创建EC2如下：\n名称： target APP 实例类型：c6g.large 密钥对名称：自己的用户名 VPC： lab 安全组：lab 存储：默认 角色： 配置用户数据: #!/bin/sh #sudo yum groupinstall -y 'Development Tools' #yum install -y openssl-devel java-11-amazon-corretto-headless maven #get ...  3. 应用迁移实施 3.1使用登录SSM的远程连接管理器或者Putty连接EC2\n连接方法请参考web迁移的2.2部分\n3.2 部署应用相关的arm环境中的JVM环境，依赖包等\n3.3 部署应用软件\n3.4 启动应用软件\n4。应用测试和验证 测试应用软件的端口和返回值\n5.总结 参考链接 Appendix  Go迁移的案例 Python迁移 X86-ARM C++从X86-ARM  "
},
{
	"uri": "/2-%E5%AE%9E%E9%AA%8C2-graviton-migration/3-%E6%95%B0%E6%8D%AE%E5%B1%82%E8%BF%81%E7%A7%BB.html",
	"title": "WEB层迁移",
	"tags": [],
	"description": "",
	"content": " 目标：通过对常规的WEB层应用-apache迁移实验，使学员快速掌握WEB层应用如何使用Graviton创建和部署，以及如何迁移.\n WEB层迁移场景 小汪公司是一个互联网企业，现在有一个电商系统，前端使用的是Nginx，原系统使用的是传统的X86部署，现在出于将本增效的目的，需要把系统迁移到AWS Graviton3架构的EC2主机上，并且希望能够把数据和配置都迁移到新的ARM架构系统上\n1. 迁移前的准备工作 1.1登录实验账号\n请参考“登录实验环境账号—登录AWS EventEngine说明”\n1.2确认源端和目标端信息\n在aws控制台查看一台X86架构的EC2主机，并且已安装nginx\nNginx的配置文件路径 /etc/nginx/conf.d/*.conf 网站目录路径： /usr/share/nginx/\n 需要把nginx的配置文件迁移到目标ARM服务器 需要把网站的数据迁移到目标ARM服务器 考虑对应的权限问题。  1.3 创建一个密钥\n在左侧的控制台导航菜单选择EC2 Dashboard，选密钥对， 点击创建密钥对 Name请使用自己的名字或小组名的拼音，创建一个.pem的key 第一次创建.pem时，提示请下载时并妥善保存，只有创建时这一次下载机会。\n1.4 创建一个AK，SK 首先在控制台中上方搜索栏搜索 IAM，并从结果列表中选中此服务。\n然后从列表中选择 用户，并且选中自己的用户名，继续如下图操作 请及时下载AKSK的CSV文件，并且妥善保存  2. 创建GRAVITON的EC2实例 2.1 导航到EC2控制台\n创建EC2，在左侧的控制台导航菜单选择EC2 Dashboard（EC2控制面板）\n首先在控制台中上方搜索栏搜索 EC2，并从结果列表中选中此服务。\n验证控制台右上角的Region（区域）是否与本次实验的Region值一致，然后从列表中选择 Launch instance（启动实例）下拉菜单，启动实例\n选择启动实例 注意：架构处的下拉框请选中 64位（ARM），如下图 启动实例的参数如下：\n创建EC2如下：\n名称： target Nginx 实例类型：c6g.large Amazon Machine Image（AMI）： Amazon Linux 2 AMI（HVM） 架构：64位（ARM） 密钥对名称：自己的用户名 VPC： lab 安全组：lab 存储：默认 配置用户数据： 角色：  最后点击启动实例按钮在，请在summary（汇总）核对下参数信息。 启动完毕EC2后，可以悬着 View all instance（查看所有实例），等待实例的状态显示为Running（正在运行），这表示实例已完成启动。\n2.2 部署nginx 可以验证当前的nginx的前端页面是否已经启动。 可以查看一下当前EC2的公网IP地址,然后在浏览器上输入,得到以下页面 方法1，使用putty等linux工具连接到EC2， 打开putty，指定pem文件，服务器地址\nAmazon的EC2中，默认是不允许使用用户名和密码直接连接Instance的，而是通过AWS (Amazon Web Service)提供的证书。在第一次使用EC2的时候，AWS会要求你创建一个证书并下载，证书是一个.pem文件。\nHost Name (主机名) 框中，输入 主机DNS或者公网IP地址\nAmazon Linux AMI，用户名称是 ec2-user\n端口： 22\n在 Category (类别) 窗格中，展开 Connection (连接)，再展开 SSH，然后选择 Auth (身份验证)。完成以下操作：\n单击 Browse (浏览)。\n选择您为密钥对生成的 .ppk 或 .pem 文件，然后单击 Open (打开)。\n如果这是您第一次连接到此实例，PuTTY 会显示安全警告对话框，询问您是否信任您要连接到的主机。请单击Yes\n 方法2，使用AWS 的 SSM 工具链接 点击， 确认你的EC2是否具有对应的ssm 角色\n在左侧的控制台导航菜单选择EC2 Dashboard（EC2控制面板） 首先在控制台中上方搜索栏搜索 EC2，并从结果列表中选中此服务。然后选中对应的EC2，点击操作按钮，安全，编辑IAM角色。 如果已经有对应的SSM角色，则说明有SSM连接的权限。 点击连接按钮， 选择会话管理器session manager，点击连接，进入这台EC2的操作系统命令行界面 安装nginx，请执行以下命令，安装nginx，\nsudo amazon-linux-extras install -y nginx1 systemctl enable nginx systemctl start nginx  3. 迁移Nginx实例 使用复制功能，复制nginx的配置文件\n首先创建一个bucket桶\n在左侧的控制台导航菜单选择S3 Dashboard（EC2控制面板） 首先在控制台中上方搜索栏搜索 S3，并从结果列表中选中此服务。然后选中对应的S3，点击操作按钮 点击创建桶 桶名请使用自己的组名+姓名的拼音命名。 最后点击创建 把文件上传到S3\n源端的nginx已经安装AWS CLI\n然后拷贝到目标服务器的对应目录\n使用AWS CLi命令\naws configure  填写AK，SK以及默认登录的地域等信息\n AWS Access Key ID [None]: AWS Secret Access Key [None]: Default region name [None]: Default output format [None]:  复制存储桶的对象文件\n aws s3 cp s3://yourbucket/nginx.conf /etc/nginx/conf.d/ aws s3 cp s3://yourbucket/web /usr/share/nginx/  4. 验证迁移结果 访问EC2的公网地址。 查询方法 打开web浏览器，输入EC2公网地址，会见到以下页面\n"
},
{
	"uri": "/3-%E5%AE%9E%E9%AA%8C3-graviton-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95.html",
	"title": "实验3 -- Graviton 性能测试",
	"tags": [],
	"description": "",
	"content": " java-性能测试 redis-性能测试 mysql-性能测试  "
},
{
	"uri": "/3-%E5%AE%9E%E9%AA%8C3-graviton-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/1-java-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95.html",
	"title": "Java 性能测试",
	"tags": [],
	"description": "",
	"content": " 目标：通过对常规的Java应用性能测试，使学员快速了解到在X86架构和ARM架构的性能差异，以及熟练使用wrk压力测试工具，分析比较不同架构的性能差异.\n ##架构图 ##1 测试前准备工作 1.1按照架构图部署测试环境，现有环境中部署3台主机，分别是1台压测服务器，提供压测，2台java应用服务器，1台X86，1台ARM架构\n1.2 创建压测服务器\n创建EC2如下：\n名称： stress-test 实例类型：c5.4xlarge Amazon Machine Image（AMI）： Amazon Linux 2 AMI（HVM） 架构：64位（ARM） 密钥对名称：自己创建的密钥对 VPC： lab 安全组：lab 存储：默认 配置用户数据：  1.3 创建gravition目标主机\n名称： gravition-java 实例类型：m5.xlarge Amazon Machine Image（AMI）： Amazon Linux 2 AMI（HVM） 架构：64位（ARM） 密钥对名称：自己创建的密钥对 VPC： lab 安全组：lab 存储：默认 配置用户数据：  ##2 服务器环境部署\n##2.1使用putty或者第三方工具登录gravition-java目标服务器，也可以使用aws ssm工具登录\nSUT Setup 复制以下脚本，在目标主机上运行\necho \u0026quot;Get a compiler, git, etc\u0026quot; sudo yum groupinstall -y 'Development Tools' sudo yum install -y openssl-devel java-11-amazon-corretto-headless maven sudo su export JAVA_HOME=`ls -d /usr/lib/jvm/java-11-amazon-corretto.*` alternatives --set java $JAVA_HOME/bin/java cat \u0026lt;\u0026lt; EOF \u0026gt; /etc/systemd/system/java.service [Unit] Description=Java Application as a Service [Service] User=ec2-user WorkingDirectory=/FrameworkBenchmarks/frameworks/Java/netty ExecStart=/usr/bin/java -jar target/netty-example-0.1-jar-with-dependencies.jar SuccessExitStatus=143 TimeoutStopSec=10 Restart=on-failure RestartSec=5 [Install] WantedBy=multi-user.target EOF sudo systemctl daemon-reload sudo systemctl enable java.service sudo systemctl start java.service cd / git clone https://github.com/TechEmpower/FrameworkBenchmarks.git cd FrameworkBenchmarks/frameworks/Java/netty mvn compile assembly:single 等待安装完毕，本地主机已经安装并且启动了一个基于8080端口的java应用陈旭，\n可以使用netstat -natp命令请验证一下应用程序是否已经正常启动，\nActive Internet connections (servers and established) Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 0.0.0.0:111 0.0.0.0:* LISTEN - tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:25 0.0.0.0:* LISTEN - tcp 0 0 172.31.35.211:56960 169.254.169.254:80 TIME_WAIT - tcp 0 0 172.31.35.211:57414 52.119.161.149:443 ESTABLISHED - tcp 0 360 172.31.35.211:22 205.251.233.176:28221 ESTABLISHED - tcp 0 0 172.31.35.211:35552 52.94.210.188:443 ESTABLISHED - tcp6 0 0 :::111 :::* LISTEN - tcp6 0 0 :::8080 :::* LISTEN 1174/java tcp6 0 0 :::22 :::* LIS\n2.2 确认X86主机也一样可以登录，并且安装启动了基于8080端口的java应用程序 2.3 安装压测主机 请下载压测主机wrk安装的脚本到主机并且执行，\n脚本内容如下：\n#!/bin/bash set -e echo \u0026quot;\u0026gt;\u0026gt;Get a compiler, git, etc\u0026quot; sudo yum groupinstall -y -q 'Development Tools' sudo yum install -y -q openssl-devel echo \u0026quot;\u0026gt;\u0026gt;Getting wrk2\u0026quot; # download a popular loag generator rm -rf wrk2 git clone https://github.com/giltene/wrk2.git pushd wrk2 git checkout 44a94c17d8e6a0bac8559b53da76848e430cb7a7 \u0026amp;\u0026gt;/dev/null NCPUS=`nproc` echo \u0026quot;\u0026gt;\u0026gt;Building wrk...\u0026quot; make -j$NCPUS \u0026amp;\u0026gt; /dev/null \u0026amp;\u0026amp; echo \u0026quot;Built wrk successfully\u0026quot; echo \u0026quot;\u0026gt;\u0026gt;Run ./run.sh to benchmark.\u0026quot; popd cat \u0026lt;\u0026lt; EOF \u0026gt; report.lua done = function(summary, latency, requests) io.write(\u0026quot;------------------------------\\n\u0026quot;) rps = summary.requests / (summary.duration/1000/1000) io.write(string.format(\u0026quot;%s,%s,%g,%d\\n\u0026quot;, \u0026quot;BENCH\u0026quot;, \u0026quot;ORPS\u0026quot;, rps, latency:percentile(50))) end EOF ##3开始性能测试 请下载性能测试的excel文档，并且记录数据用户做性能比较\n##3.1 在X86和graviton的主机上分别安装htop用以监控被压测主机的CPU性能变化\nyum install -y htop htop 执行后效果如下图： 其中1，2，3，4为4个VCPU的使用百分比，Mem为内存使用百分比，压测的时候，我们可以很直观的看到CPU和内存的使用变化。\n##3.2 在stress-test压测主机上执行压测命令\n请把替换成你的Java服务器的内网IP地址\n/wrk2/wrk -t$(nproc) -c10000 -d40s -R150000 -s report.lua http://\u0026lt;your IP\u0026gt;:8080/json 其中-t$(nproc)为当前主机的线程数，取值为当前主机的VCPU数 -c为当前模拟客户数 -d 为本次压测的时长 -R 为本次压测的请求数\n可以根据自己的判断，修改压测的指标，观察不同压力下，x86主机和arm主机的新能表现，并及时把压测数据记录到excel表做测试报告 执行命令效果如下图：\n其中我们主要记录下Latency Avg的值，以及 Requests/sec 每秒请求数，并记录到excel中方便做比较\n对于Java主机，我们分别记录下CPU的平均使用率（load average）。用来判断大压力下对主机的影响\n4 测试总结 通过多次的测试数值对比，我们可以在excel中清楚的观察到，不同压力下，对于主机的CPU负载，延迟等关键信息指标的影响。\n请保留此关键信息，用于对小汪公司的压测结果提出充分的建议和证明\n"
},
{
	"uri": "/3-%E5%AE%9E%E9%AA%8C3-graviton-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/2-redis-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95.html",
	"title": "Redis 性能测试",
	"tags": [],
	"description": "",
	"content": " 目标：通过对常规的Redis性能测试，使学员快速了解到在X86架构和ARM架构的性能差异，以及熟练使用benchmark压力测试工具，分析比较不同架构的Redis性能差异.\n ##架构图 ##1 测试前准备工作 1.1按照架构图部署测试环境，现有环境中部署3台主机，分别是1台压测服务器，提供压测，2台Redis服务器，1台X86，1台ARM架构\n1.2 创建压测服务器，如果已经完成Java测试，请继续延续使用Java压测的服务器，无需创建新的主机\n1.3 创建gravition-redis目标主机\n名称： gravition-redis 实例类型：r6g.xlarge Amazon Machine Image（AMI）： Amazon Linux 2 AMI（HVM） 架构：64位（ARM） 密钥对名称：自己创建的密钥对 VPC： lab 安全组：lab 存储：默认 配置用户数据：  2 Redis 服务器环境部署 2.1使用putty或者第三方工具登录gravition-java目标服务器，也可以使用aws ssm工具登录 在r6g.xlarge的EC2上部署redis，请执行一下命令\nsudo yum -y groupinstall \u0026quot;Development Tools\u0026quot; git clone --recursive --depth 1 --branch 6.0.9 https://github.com/redis/redis.git cd redis make sed -i 's/^bind 127.*$/bind 0\\.0\\.0\\.0 ::1/' redis.conf echo 'save \u0026quot;\u0026quot;' \u0026gt;\u0026gt; redis.conf ./src/redis-server redis.conf 执行完命令效果如下，redis已经成功运行\n2.2 部署benchmark压测服务，使用putty或者第三方工具登录gravition-java目标服务器，也可以使用aws ssm工具登录 请在stress-test压测服务器上执行以下命令\nsudo yum -y groupinstall \u0026quot;Development Tools\u0026quot; sudo yum install -y autoconf automake make gcc-c++ sudo yum install -y pcre-devel zlib-devel libmemcached-devel libevent-devel openssl-devel git clone https://github.com/RedisLabs/memtier_benchmark.git cd memtier_benchmark/ autoreconf -ivf ./configure make sudo make install 执行完毕离开此页面即可。\n3 开始对redis进行压力测试 请下载压测excel模版文档，对与压测结果进行记录和比较\n3.1 请在stress-test压测服务器上执行以下命令，请把替换成你的Redis服务器的私网IP\nmemtier_benchmark -s \u0026lt;redis server private IP\u0026gt; --run-count 5 --data-size=128 --out-file bench_out --ratio 1:1 --threads=5 --key-pattern S:S -c 50 执行结果如下图\n参数说明\n3.2 请执行一下命令，查询本次压测的结果 在memtier_benchmark的目录下有个bench_out的log文档，\ncat bench_out 执行完结果如下 请找到如下图的结果 参数说明，我们主要看以下3个指标，并且把记过保存到测试模版的excel文档中，注意区分X86和ARM服务器的不同性能。\nTotal：吞吐量 Avg. Latency p99 Latency  4 测试总结 通过测试的最终数据展示，我们可以发现ARM架构gravition的服务器在吞吐量和延迟上的表现有明显优势\n测试结束请不要关闭压测服务器，以待数据库压测使用。\n"
},
{
	"uri": "/3-%E5%AE%9E%E9%AA%8C3-graviton-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/3-mysql-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95.html",
	"title": "Mysql 性能测试",
	"tags": [],
	"description": "",
	"content": " 目标：通过对常规的mysql数据库性能测试，使学员快速了解到在X86架构和ARM架构的性能差异，以及熟练使用sysbench测试工具，分析比较不同架构的数据库性能差异.\n ##架构图 ##1 测试前准备工作 1.1按照架构图部署测试环境，现有环境中部署3台主机，分别是1台压测服务器，提供压测，2台mysql服务器，1台X86，1台ARM架构，Mysql使用8.0版本\n1.2 创建压测服务器，创建压测服务器，如果已经完成Java测试，请继续延续使用Java压测的服务器，无需创建新的主机\n1.3 创建gravition-mysql目标主机\n创建EC2如下：\n名称： gravition-mysql 实例类型：r6g.xlarge Amazon Machine Image（AMI）： Amazon Linux 2 AMI（HVM） 架构：64位（ARM） 密钥对名称：自己创建的密钥对 VPC： lab 安全组：lab 存储：默认 配置用户数据：  2 Mysql 服务器环境部署 2.1使用putty或者第三方工具登录gravition-java目标服务器，也可以使用aws ssm工具登录 在r6g.xlarge的EC2上部署redis，请执行一下命令\nsudo yum install https://dev.mysql.com/get/mysql80-community-release-el7-5.noarch.rpm sudo systemctl enable --now mysqld systemctl status mysqld #A superuser account ‘root’@’localhost is created with initial password set and stored in the error log file. To reveal it, use the following command: sudo grep \u0026lsquo;temporary password\u0026rsquo; /var/log/mysqld.log\nsudo mysql_secure_installation -p\n所有的选项选Y即可，修改root账号的new password: Gravition2!\n登录mysql，并且输入刚才修改好的密码Gravition2!\nmysql -uroot -p\n创建一个mysql测试用的账号gravition，并且给予次账号远程访问的权限，\nALTER USER \u0026lsquo;root\u0026rsquo; IDENTIFIED WITH mysql_native_password BY \u0026lsquo;Gravition2!'; CREATE USER \u0026lsquo;graviton\u0026rsquo;@'%\u0026rsquo; IDENTIFIED BY \u0026lsquo;Graviton2!'; GRANT ALL PRIVILEGES ON . TO \u0026lsquo;graviton\u0026rsquo;@'%'; ALTER USER \u0026lsquo;graviton\u0026rsquo; IDENTIFIED WITH mysql_native_password BY \u0026lsquo;Graviton2!';\n最后输入quit突出数据库命令行\n优化mysql，请更改 mysql 配置文件：\nsudo vim /etc/my.cnf\n配置参数如下 [mysqld] ssl=0 performance_schema=OFF skip_log_bin server_id = 7\ngeneral table_open_cache = 200000 table_open_cache_instances=64 back_log=3500 max_connections=4000 join_buffer_size=256K sort_buffer_size=256K\nfiles innodb_file_per_table innodb_log_file_size=2G innodb_log_files_in_group=2 innodb_open_files=4000\nbuffers innodb_buffer_pool_size=24000 innodb_buffer_pool_instances=8 innodb_page_cleaners=8 innodb_log_buffer_size=64M\ndefault_storage_engine=InnoDB innodb_flush_log_at_trx_commit = 1 innodb_doublewrite= 1 innodb_flush_method= O_DIRECT innodb_file_per_table= 1 innodb_io_capacity=2000 innodb_io_capacity_max=4000 innodb_flush_neighbors=0 max_prepared_stmt_count=1000000 bind_address = 0.0.0.0 datadir=/var/lib/mysql socket=/var/lib/mysql/mysql.sock\nlog-error=/var/log/mysqld.log pid-file=/var/run/mysqld/mysqld.pid\n重启 mysql:\nsudo systemctl restart mysqld\n请在其他主机上安装 sysbench\ncurl -s https://packagecloud.io/install/repositories/akopytov/sysbench/script.rpm.sh | sudo bash sudo yum -y install sysbench\n并使用以上的步骤，安装mysql数据库，并初始化配置\n3 开始测试数据库性能 3.1请执行一下命令开始测试数据库性能\nsysbench oltp_read_only \u0026ndash;threads=4 \u0026ndash;mysql-user=root \u0026ndash;mysql-password=Gravition2! \u0026ndash;table-size=10000000 \u0026ndash;tables=10 \u0026ndash;db-driver=mysql \u0026ndash;mysql-db=sbtest prepare\nsysbench oltp_read_only \u0026ndash;time=300 \u0026ndash;threads=4 \u0026ndash;table-size=1000000 \u0026ndash;mysql-host=\u0026ndash;mysql-user=root \u0026ndash;mysql-password=\u0026lsquo;Gravition2!\u0026rsquo; \u0026ndash;db-driver=mysql \u0026ndash;mysql-db=sbtest run\n执行结果如下图\n3.2 请观察目标主机的CPU使用率\n分别在主机上安装htop工具\nsudo yum -y install htop htop\n执行结果如下图\n4 测试总结 通过记录和分析X86和ARM架构的测试数据，我们可以看出两种不同架构服务器性能的差异\n"
},
{
	"uri": "/4-graviton-%E7%B4%A0%E6%9D%90%E5%BA%93.html",
	"title": "Graviton 素材库",
	"tags": [],
	"description": "",
	"content": "各种资源来源链接 参考案例 大宇无限： https://aws.amazon.com/cn/solutions/case-studies/mobiuspace-case-study/\nNextRoll Video Testimonial： https://aws.amazon.com/cn/solutions/case-studies/nextroll-graviton/\n架构图/PPT常用素材 https://aws.amazon.com/cn/architecture/icons/\n中国区特殊说明： https://amazonaws-china.com/china-gateway/ https://docs.amazonaws.cn/en_us/aws/latest/userguide/introduction.html https://www.amazonaws.cn/en/about-aws/china/faqs/?nc1=h_ls\nGraviton实验练习 https://workshops.aws/card/graviton\nmysql-比较Graviton（ARM）与英特尔和AMD MySQL的性能 https://www.percona.com/blog/comparing-graviton-performance-to-arm-and-intel-for-mysql/\nredis-在AWS Graviton2上部署Redis可获得高达35%的性能优势 https://community.arm.com/arm-community-blogs/b/tools-software-ides-blog/posts/redis-on-aws-graviton2\nnginx-将性能和成本优化50%以上，使用基于Arm的AWS EC2节省20%，M6g实例 https://armkeil.blob.core.windows.net/developer/Files/pdf/white-paper/guidelines-for-deploying-nginx-plus-on-aws.pdf\ngo-使用Go 1.18和AWS Graviton，使您的Go工作负载提高20% https://aws.amazon.com/cn/blogs/compute/making-your-go-workloads-up-to-20-faster-with-go-1-18-and-aws-graviton/\n查找 arm 镜像 https://amazon.awsapps.com/workdocs/index.html#/document/05d58496a5baf9e27439d33b7f30881e2aa9f1cc985978e2adda68e9b6aa9560\n"
},
{
	"uri": "/5-%E8%AF%BE%E7%A8%8B%E6%80%BB%E7%BB%93.html",
	"title": "课程总结",
	"tags": [],
	"description": "",
	"content": "总结 通过本次实验，我们掌握了Graviton的介绍方案，方案编写，迁移和测试的POC，测试报告。\n调研表 请您对本次课程进行评价，扫描下图二维码： 感谢您给出的评价和对课程的认可。\n"
},
{
	"uri": "/categories.html",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags.html",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]